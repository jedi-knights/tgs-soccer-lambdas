# Required Environment Variables:
#
# AWS_ACCESS_KEY_ID: Your AWS access key ID. This is used to authenticate with AWS services.
# AWS_SECRET_ACCESS_KEY: Your AWS secret access key. This is used in conjunction with the access key ID to authenticate with AWS services.
# AWS_REGION: The AWS region where your resources are located (e.g., us-east-1).
# S3_BUCKET_NAME: The name of the S3 bucket where the Lambda deployment packages will be stored.

name: Deploy Lambda Functions

on:
  push:
    branches:
      - main  # Trigger the workflow only on push to the 'main' branch

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Set up Python environment
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.9

      # Step 3: Install global dependencies
      - name: Install global dependencies
        run: |
          pip install -r requirements.txt -t dependencies/
        working-directory: .

      # Step 4: Package Lambda functions
      # Loop through each Lambda function directory, copy dependencies, and zip the code

      - name: Package get_clubs_by_organization
        run: |
          cp -r dependencies/* lambda_functions/get_clubs_by_organization/ > /dev/null 2>&1
          cd lambda_functions/get_clubs_by_organization/
          zip -r ../../get_clubs_by_organization.zip . > /dev/null 2>&1
        working-directory: .

      - name: Package get_countries
        run: |
          cp -r dependencies/* lambda_functions/get_countries/ > /dev/null 2>&1
          cd lambda_functions/get_countries/
          zip -r ../../get_countries.zip . > /dev/null 2>&1
        working-directory: .

      # Repeat for other Lambda functions
      - name: Package get_match_records
        run: |
          cp -r dependencies/* lambda_functions/get_match_records/ > /dev/null 2>&1
          cd lambda_functions/get_match_records/
          zip -r ../../get_match_records.zip . > /dev/null 2>&1
        working-directory: .

      - name: Package get_organizations
        run: |
          cp -r dependencies/* lambda_functions/get_organizations/ > /dev/null 2>&1
          cd lambda_functions/get_organizations/
          zip -r ../../get_organizations.zip . > /dev/null 2>&1
        working-directory: .

      - name: Package get_states
        run: |
          cp -r dependencies/* lambda_functions/get_states/ > /dev/null 2>&1
          cd lambda_functions/get_states/
          zip -r ../../get_states.zip . > /dev/null 2>&1
        working-directory: .

      # Step 5: Package Lambda Layer (if using a layer for shared code)
      - name: Package Lambda Layer
        run: |
          cd common/
          zip -r ../common_layer.zip . > /dev/null 2>&1
        working-directory: .

      # Step 6: AWS CloudFormation Package and Deploy
      # First package CloudFormation template to handle S3 uploads

      - name: Package and deploy CloudFormation stack
        run: |
          aws cloudformation package \
            --template-file cloudformation_templates/lambda_template.yaml \
            --s3-bucket ${{ secrets.S3_BUCKET_NAME }} \
            --output-template-file cloudformation_templates/packaged_template.yaml

          aws cloudformation deploy \
            --template-file cloudformation_templates/packaged_template.yaml \
            --stack-name tgs-soccer-lambda-stack \
            --capabilities CAPABILITY_IAM
            --parameter-overrides S3BucketName=${{ secrets.S3_BUCKET_NAME }}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: us-east-1
          S3_BUCKET_NAME: ${{ secrets.S3_BUCKET_NAME }}

      # Step 7: Post-deployment cleanup (optional)
      - name: Cleanup
        run: |
          rm *.zip  # Remove all the zip files created during the workflow